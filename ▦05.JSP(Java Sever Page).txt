■■■ JSP(Java Server Pages) ■■■
1. JSP(Java Server Pages) : 웹 프로그램 작성 언어의 한 종류
-------------------------------------------------------------------------------------------
2. JSP(Java Server Pages)는 동적(Dynamic)인 웹 페이지를
   비교적 간단히 만들 수 있는 방법을 제공하는
   자바를 기반으로 하고 있는 스크립트 언어(Server Side Script)로
   자바 엔터프라이즈 어플리케이션에서 UI(User Interface)영역을
   담당하고 있다.
   //-- JSP 가 Servelet 뒤에 나와 대체하는 방향으로 나오긴 했으나,
   // 100% 대체된다기보다 보완하여 JSP 가 활용되지 못하는 부분을 Servlet 을 사용하게 됨
   // 이 때, JSP가 UI 파트를 담당하게 되었다는 의미 
-------------------------------------------------------------------------------------------
3. JSP 는 자바를 서버 환경에서 사용하는 스크립트 방식의 언어로
   단일 스레드로 클라이언트의 요청에 서비스한다.
   요청이 있을 때 마다.. 즉, 객체가 생성될 때 마다...
   프로세스를 생성하는 기존의 CGI 와는 달리
   하나의 메모리를 공유하면서 서비스되는 원리를 갖고 있다.
   이러한 원리는 서버측 부하를 줄여주며,
   JSP 내부에는 보여주는 코드만 작성하고
   직접 작업하는 부분은 자바 빈으로 구성하여 둘을 분리할 수 있다.
   이는 서로 영향을 주지 않으면서 수정할 수 있는 장점을 취하며,
   JAVA 가 갖고 있는 장점인 재사용성을 높일 수 있게 한다.

   클라이언트 <-------------------------------> 서버
   HTML, CSS, Javascript <--------------------> JSP(JAVA)
   브라우저(IE,CR,FF...) <--------------------> 웹서버(톰캣), 오라클
   요청  <------------------------------------> 응답(HTML 웹 페이지)
-------------------------------------------------------------------------------------------
4. JSP 실행 구조
   1단계. 웹 클라이언트에서 웹 서버에 웹 프로그램(페이지) 요청
   2단계. 웹 서버에서 웹 클라이언트가 요청한 JSP 프로그램(페이지) 로드
   3단계. JSP 페이지에 대한 변환 실행
          ※ 이 과정에서 일반 『.java』인 파일로 변환된다. 『→Servlet』//-변환된 파일
          // 즉, JSP만으로 구성되어있는것은 없는것! -- 작업을 편하게 만들 뿐 
   4단계. 『.java』인 파일로 변환된 Servlet 의 컴파일(.class) 및 실행
   5단계. 실행 결과로 동적 생성된 HTML Document 를 클라이언트 측에 응답
   6단계. 웹 클라이언트는 응답받은 HTML Document 를 브라우저에서 웹 페이지 형태로 출력
-------------------------------------------------------------------------------------------
5. 이클립스 JSP 개발 환경 구축
   1) 프로젝트(new) 생성 시 『Dynamic Web Project』 선택
   2) 프로젝트명 입력시 식별자 작성 규칙을 준수
      원래 규칙에 따르면 『JspTest001.jsp』와 같이 명명해야하지만
      클라이언트 측에서 (대소문자 구분 없이) 좀 더 편하게 사용할 수 있도록
      일단... 지금은 jsptest001.jsp 와 같이 명명할 수 있다.
      // 현재까지는 해당 문서 주소를 직접 입력하여 문서를 요청하게 되나
      // 곧, 해당 부분은 클라이언트가 문서의 이름을 직접 확인하지 못하게 하는 형태로
      // 만들것 이기 때문에, 현재는 실습 편의상 소문자로 대체한다
      // (실제로 url 주소를 보면 소문자로 구성)
   3) Target Runtime 지정 → 톰캣 설치 디렉터리 연결
   4) 프로젝트 생성 후에는 Server 탭에서 톰캣 서버 등록
      (단, 서버를 새로 등록했을 경우 서버 관련 설정을 재구성)
   5) 톰캣 서버에 프로젝트 등록 → add and remove
   6) 톰캣 서버 시작(재시작)
      ※ 이 시점에서...
         포트번호 설정 및 확인 필요
         (오라클이 웹 상에서 port 8080 을 사용하기 때문에 충돌 방지)
         『Project Explorer』의 『server』 디렉터리 노드를 확장하면
         『server.xml』파일이 존재하며 이 파일을 열어 63~65 정도 라인의 내용을 수정한다.
         <Connector URIEncoding="UTF-8"...port="3306"/>
                    ------------------    ----------
                         ↑ 추가            ↑수정(기본 8080)
      ※ xml 파일을 수정한 이후에는 반드시 서버를 재시작 해야한다. check!
   7) JSP 페이지 작성(확장자 『.jsp』)
      → WebContent 디렉터리 하위에 작성
      ※ 페이지 작성 전에 Encoding 방식을 체크 및 설정한다. (UTF-8)
      ※ JSP 기본 페이지의 템플릿을 HTML5 기반으로 수정하여 설정한다. (기본 HTML 4.01)
   8) 톰캣 서버가 실행되고 있는 상태에서
      웹 브라우저의 URL 주소 창에 다음과 같은 주소를 요청한다. (클라이언트의 입장)
      http://localhost:3306/WebApp04/jsptest001.jsp
             ---------
             211.238.142.xxx 또는 127.0.0.1

      ※ 원격 접속인 경우는 localhost 나 127.0.0.1 대신
         목적지 서버의 IP Address 를 작성(요청)해야 한다.


○ JSP 구성 요소

   1. 디렉티브(지시어)
      - 페이지에 대한 설정 정보 지정. 클래스 속성을 변경
      <%@ %>

     ·page
       페이지에 대한 기본 정보 입력
       (생성하는 문서의 타입, 출력 버퍼의 크기, 에러 페이지 등)
       현재 문서를 나타내는 객체
       page 디렉티브는 JSP 페이지와 관련된 속성을 정의하고 
       이 속성들은 웹 컨테이너에 정보를 제공한다.
       또한, 한 페이지에 page 디렉티브는 여러 번 등장할 수 있고
       위치도 관계가 없다. 하지만 보통 페이지 상단에 기술한다.	










